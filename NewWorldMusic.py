
import sys,os
import time
start = time.process_time()
import mss
import subprocess
from random import randrange, uniform
from pynput.mouse import Button, Controller
mouse = Controller()
from pynput.keyboard import Listener, KeyCode, Key, Controller as KeyBoardController
from PIL import Image, ImageFilter, ImageOps, ImageStat
import threading
import cv2
from os import listdir
from os.path import isfile, join
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import win32api, win32con
from math import isclose
#from tensorflow.keras.models import Model,load_model
#model_path=os.path.join('D:',os.sep,'New World Python', 'MusicModel1')
#model = load_model(model_path)

import tensorflow.compat.v1 as tf

## Loading model
sess=tf.InteractiveSession()
frozen_graph="./frozen_models/simple_frozen_graph.pb"
with tf.gfile.GFile(frozen_graph, "rb") as f:
      graph_def = tf.GraphDef()
      graph_def.ParseFromString(f.read())
sess.graph.as_default()
tf.import_graph_def(graph_def)
# Frozen model inputs: 
# [<tf.Tensor 'x:0' shape=(None, None, None, 3) dtype=float32>]
# Frozen model outputs: 
# [<tf.Tensor 'Identity:0' shape=(None, None, None, 8) dtype=float32>]  
input_tensor = sess.graph.get_tensor_by_name("x:0") 
output_tensor = sess.graph.get_tensor_by_name("Identity:0")        
def get_Note(image,sess):
    infrencing = sess.run(output_tensor, {'x:0': image})
    return infrencing





keyboard = KeyBoardController()
delay = 1
button = Button.left
start_stop_key = KeyCode(char='z')
exit_key = KeyCode(char='x')

FishHooked = False
DoneReeling = False


class ClickMouse(threading.Thread):
    def __init__(self, delay, button):
        super(ClickMouse, self).__init__()
        self.delay = delay
        self.button = button
        self.running = False
        self.program_running = True

    def start_clicking(self):
        self.running = True

    
    def stop_clicking(self):
        self.running = False

    def exit(self):
        self.stop_clicking()
        self.program_running = False
    def GetScreenShot(monitor = 1):
        start = time.clock()
        with mss.mss() as mss_instance:  # Create a new mss.mss instance
            #monitor_1 = mss_instance.monitors[1]  # Identify the display to capture
            monitor_1 = {"top": 1000, "left": 750, "width": 150, "height": 300} # Identify the display to capture
            screenshot = mss_instance.grab(monitor_1)  # Take the screenshot
        open_cv_image = np.array(screenshot) 
        grayscaleImage = cv2.cvtColor(open_cv_image, cv2.COLOR_BGR2GRAY)
        ScreenShot  = cv2.cvtColor(grayscaleImage, cv2.COLOR_GRAY2RGB)        
        testimage=cv2.resize(ScreenShot,(224,224,))
        testimage = np.expand_dims(testimage,axis = 0)
        return testimage
    def SaveImage(img,classification):
        CurrentFile = os.path.join('D:',os.sep,'New World Python', 'MusicImages','AutoGenerated:',str(classification),str(round(time.clock(),2))+'.jpg')
        status = cv2.imwrite(CurrentFile,img)


    


    def ParseModelResult(ModelResult):
        ModelKey = ("a","Click","d","None","s","Space","w")
        ModelResult = np.argmax(ModelResult)
        Guess = ModelKey[ModelResult]
        if Guess == "Space":
            keyboard.press(Key.space)
            time.sleep(uniform(.02,.04))
            keyboard.release(Key.space)
            time.sleep(.01)
        elif Guess == "Click":
            mouse.press(Button.left)
            mouse.press(Button.right)
            time.sleep(uniform(.02,.04))
            mouse.release(Button.left)
            mouse.release(Button.right)
            time.sleep(.01)
        elif Guess == "None":
            time.sleep(.0001)
        else:
            keyboard.press(Guess)
            time.sleep(uniform(.02,.04))
            keyboard.release(Guess)
            time.sleep(.08)
        return True

    def PlayExpertWindsWardGuitar():
        endtime = time.clock() + 52
        start = time.clock()
        while time.clock() < endtime:
            start = time.clock()
            image = ClickMouse.GetScreenShot()
            start = time.clock()
            #prediction = model.predict(image)
            prediction = get_Note(image,sess)
            start = time.clock()
            ClickMouse.ParseModelResult(prediction)
            start = time.clock()
            time.sleep(.005)
        
    def run(self):
        while self.program_running:
            while self.running:
                time.sleep(1)
                #Assumes starting with a song selected
                print("Starting anew")
                with keyboard.pressed('e'):
                    time.sleep(uniform(.06,.24))

                time.sleep(1)
                #mouse.position = (1600,500)
                time.sleep(.03)
                ClickMouse.PlayExpertWindsWardGuitar()
                time.sleep(5)
                keyboard.press('e')
                time.sleep(3)
                keyboard.release('e')
                #mouse.press(Button.left)
                #time.sleep(2)
                #mouse.release(Button.left)
                 
                
                
                
                time.sleep(1) 
        time.sleep(.1)
		











mouse = Controller()
click_thread = ClickMouse(delay, button)
click_thread.start()
click_thread.start_clicking()

def on_press(key):
    print(key)
    if key == start_stop_key:
        if click_thread.running:
            click_thread.stop_clicking()
        else:
            click_thread.start_clicking()
    elif key == exit_key:
        click_thread.exit()
        listener.stop()



with Listener(on_press=on_press) as listener:
	listener.join()
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
